@page "{id:int?}"
@using MovieTicketSystem.Helpers
@model MovieTicketSystem.Pages.Showtimes.DetailsModel

@{
    ViewData["Title"] = "Showtime Details";
}

<div class="container mx-auto px-4 py-8">
    <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
            <li>
                <a asp-page="/Index" class="text-blue-600 hover:text-blue-800">Home</a>
            </li>
            <li>
                <svg class="w-4 h-4 mx-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
            </li>
            <li>
                <a asp-page="./Index" class="text-blue-600 hover:text-blue-800">Showtimes</a>
            </li>
            <li>
                <svg class="w-4 h-4 mx-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
            </li>
            <li class="text-gray-700 font-medium">@Model.Showtime.Movie?.Title</li>
        </ol>
    </nav>

    <div class="flex flex-col md:flex-row gap-6">
        <!-- Movie & Showtime Info -->
        <div class="w-full md:w-1/3">
            <div class="bg-white rounded-lg shadow-md overflow-hidden mb-6">
                <img src="@(Model.MovieImageUrl)" 
                     class="w-full h-auto object-cover" 
                     alt="@Model.Showtime.Movie?.Title"
                     onerror="this.onerror=null;this.src='https://via.placeholder.com/400x600?text=@Uri.EscapeDataString(Model.Showtime.Movie?.Title ?? "")';"
                     loading="eager">
                <div class="p-5">
                    <h4 class="text-xl font-bold text-gray-800 mb-2">@Model.Showtime.Movie?.Title</h4>
                    <p class="text-gray-500 mb-4">@Model.Showtime.Movie?.Duration minutes</p>
                    
                    <div class="mb-3">
                        <h6 class="text-gray-500 text-sm font-medium mb-2">Showtime:</h6>
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-gray-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <span>@Model.Showtime.StartTime.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <h6 class="text-gray-500 text-sm font-medium mb-2">Screen:</h6>
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-gray-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                            <span>@Model.Showtime.Screen?.Name</span>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <h6 class="text-gray-500 text-sm font-medium mb-2">Ticket Price:</h6>
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-gray-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                            <span class="text-blue-600 font-bold">@(Model.Showtime.Price.ToString("#,###")) VNƒê</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Seat Selection -->
        <div class="w-full md:w-2/3">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="px-5 py-3 bg-gray-800 text-white">
                    <h5 class="font-medium flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                        </svg>
                        Select Seat
                    </h5>
                </div>
                <div class="p-6">
                    @if (!User.Identity?.IsAuthenticated ?? true)
                    {
                        <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-blue-700">
                                        Please <a asp-page="/Account/Login" asp-route-returnUrl="@Request.Path" class="font-medium text-blue-700 underline">login</a> to book tickets.
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (!ModelState.IsValid)
                        {
                            <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                                <div asp-validation-summary="All" class="text-red-600 text-sm"></div>
                            </div>
                        }

                        <form method="post" id="bookingForm" onsubmit="return validateForm()">
                            <input type="hidden" asp-for="Id" value="@Model.Showtime.ShowtimeId" />
                            <input type="hidden" asp-for="SelectedSeats" id="selectedSeatsInput" />
                            
                            <!-- Seat Map -->
                            <div class="text-center mb-6">
                                <div class="bg-gray-200 h-12 mb-8 rounded flex items-center justify-center shadow-md transform perspective-100 -rotate-x-1">
                                    <div class="text-gray-600 text-sm font-medium">SCREEN</div>
                                </div>

                                <div class="inline-block">
                                    @foreach (var row in Model.SeatRows)
                                    {
                                        <div class="flex items-center mb-2">
                                            <div class="w-8 text-right font-bold mr-3">@row.Key</div>
                                            @foreach (var seat in row.Value)
                                            {
                                                string seatClass = "seat w-9 h-9 mx-1 flex items-center justify-center rounded text-sm cursor-pointer transition-colors";
                                                if (seat.IsBooked)
                                                {
                                                    seatClass += " booked bg-red-500 text-white cursor-not-allowed";
                                                }
                                                else
                                                {
                                                    seatClass += " bg-gray-200 border border-gray-300 hover:bg-blue-500 hover:text-white";
                                                }
                                                <div class="@seatClass" 
                                                     data-seat-id="@seat.SeatId" 
                                                     data-row="@seat.Row" 
                                                     data-number="@seat.Number"
                                                     title="@seat.Row@seat.Number">
                                                    @seat.Number
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Seat Legend -->
                            <div class="flex justify-center items-center space-x-6 mb-6">
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-gray-200 border border-gray-300 rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Available</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-blue-500 text-white rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Selected</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-red-500 text-white rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Booked</span>
                                </div>
                            </div>

                            <!-- Booking Summary -->
                            <div class="bg-gray-50 p-5 rounded-lg mb-6">
                                <h6 class="font-medium text-gray-700 mb-3">Booking Summary:</h6>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">                                <div>
                                    <p class="text-sm mb-1">Selected seats: <span id="selectedCount" class="font-medium">0</span></p>
                                    <p class="text-sm">Seats: <span id="selectedSeats" class="font-medium"></span></p>
                                </div>
                                <div class="md:text-right">
                                    <p class="text-sm mb-1">Ticket price: <span id="ticketPrice" class="font-medium">@(Model.Showtime.Price.ToString("#,###"))</span> VNƒê</p>
                                    <p class="text-sm">Total: <span id="totalPrice" class="font-medium text-blue-600">0</span> VNƒê</p>
                                </div>
                                </div>
                            </div>

                            <div class="text-center">
                                <div id="formError" class="bg-red-50 border-l-4 border-red-500 p-4 mb-4 hidden">                                        <p class="text-sm text-red-600">Please select at least one seat before booking</p>
                                </div>
                                <button type="submit" class="px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed inline-flex items-center" id="bookButton" disabled>
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                                    </svg>
                                    Book Tickets
                                </button>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <style>
        /* Add perspective utility classes that Tailwind doesn't provide by default */
        .perspective-100 {
            perspective: 100px;
        }
        
        .-rotate-x-1 {
            transform: rotateX(-1deg);
        }
        
        /* Seat styling */
        .seat {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            position: relative;
            z-index: 1;
        }
        
        /* For JavaScript compatibility */
        .seat.selected {
            background-color: #3b82f6 !important;
            color: white !important;
            border-color: #3b82f6 !important;
        }
        
        /* Explicit hover states */
        .seat:not(.booked):hover {
            background-color: #3b82f6 !important;
            color: white !important;
            transform: scale(1.05);
            transition: all 0.2s ease;
        }
        
        /* Booked seat styling */
        .seat.booked {
            pointer-events: none;
        }
        
        /* Available seat styling */
        .seat:not(.booked) {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .seat:not(.booked):active {
            transform: scale(0.95);
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const seats = document.querySelectorAll('.seat:not(.booked)');
            const selectedSeatsInput = document.getElementById('selectedSeatsInput');
            const selectedSeatsDisplay = document.getElementById('selectedSeats');
            const selectedCountDisplay = document.getElementById('selectedCount');
            const totalPriceDisplay = document.getElementById('totalPrice');
            const bookButton = document.getElementById('bookButton');
            const ticketPrice = parseInt(document.getElementById('ticketPrice').textContent.replace(/[^\d]/g, ''));
            const formError = document.getElementById('formError');
            
            const selectedSeats = [];
            
            // Add click event to each available seat
            seats.forEach(seat => {
                seat.addEventListener('click', function() {
                    const seatId = this.getAttribute('data-seat-id');
                    const row = this.getAttribute('data-row');
                    const number = this.getAttribute('data-number');
                    const seatLabel = `${row}${number}`;
                    
                    // Toggle selected class
                    this.classList.toggle('selected');
                    
                    if (this.classList.contains('selected')) {
                        // Add seat to selection
                        selectedSeats.push({
                            id: seatId,
                            label: seatLabel
                        });
                    } else {
                        // Remove seat from selection
                        const index = selectedSeats.findIndex(s => s.id === seatId);
                        if (index !== -1) {
                            selectedSeats.splice(index, 1);
                        }
                    }
                    
                    // Update display and form
                    updateBookingInfo();
                });
            });
            
            // Function to update booking information
            function updateBookingInfo() {
                // Sort seats by label for better display
                selectedSeats.sort((a, b) => a.label.localeCompare(b.label));
                
                // Update count
                selectedCountDisplay.textContent = selectedSeats.length;
                
                // Update selected seats display
                selectedSeatsDisplay.textContent = selectedSeats.map(seat => seat.label).join(', ');
                
                // Update total price
                const totalPrice = selectedSeats.length * ticketPrice;
                totalPriceDisplay.textContent = new Intl.NumberFormat('vi-VN', { style: 'decimal', maximumFractionDigits: 0, useGrouping: true }).format(totalPrice) + " VNƒê";
                
                // Update hidden input for form submission
                selectedSeatsInput.value = selectedSeats.map(seat => seat.id).join(',');
                
                // Enable/disable book button
                bookButton.disabled = selectedSeats.length === 0;
            }
            
            // Form validation function
            function validateForm() {
                if (selectedSeats.length === 0) {
                    formError.classList.remove('hidden');
                    return false;
                }
                
                formError.classList.add('hidden');
                return true;
            }
            
            // Add the validation function to the window scope
            window.validateForm = validateForm;
        });
    </script>
}